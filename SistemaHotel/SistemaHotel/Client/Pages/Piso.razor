@page "/page/piso"
@attribute [Authorize(Roles = "Administrador")]

@inject IPisoServicio _pisoServicio
@inject IDialogService _dialogServicio
@inject ISnackbar _snackBar
@inject SweetAlertService Swal;

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-5">

    <MudText Typo="Typo.h5" GutterBottom="true">Pisos</MudText>

    <MudPaper Elevation="3" Class="pa-4" Width="100%">
        <MudGrid>
            <MudItem xs="12">
                <MudButton Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Filled.Add"
                           Color="Color.Primary"
                           OnClick="AbrirNuevoModelo">
                    Nuevo Piso
                </MudButton>
            </MudItem>
            <MudItem xs="12">

                <MudTable Items="@listaModelos"
                          Dense="true"
                          Striped="true" Bordered="true"
                          Filter="new Func<PisoDTO,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1"
                          Loading="@_loading" LoadingProgressColor="Color.Info">
                    <ToolBarContent>
                        <MudSpacer />
                        <MudTextField @bind-Value="searchString1" Placeholder="Buscar" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Descripcion</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate Context="modeloRow">
                        <MudTd DataLabel="Descripcion">@modeloRow.Descripcion</MudTd>
                        <MudTd DataLabel="">
                            <MudFab Color="Color.Primary"
                                    StartIcon="@Icons.Material.Filled.Edit"
                                    Size="Size.Small"
                                    IconSize="Size.Small"
                                    OnClick="@(() => AbrirEditarModelo(modeloRow))" />
                            <MudFab Color="Color.Error"
                                    StartIcon="@Icons.Material.Filled.Delete"
                                    Size="Size.Small"
                                    IconSize="Size.Small"
                                    OnClick="@(() => EliminarModelo(modeloRow))" />
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>


            </MudItem>
        </MudGrid>
    </MudPaper>

</MudContainer>
@code {
    List<PisoDTO> listaModelos = new List<PisoDTO>();
    private string searchString1 = "";
    private PisoDTO selectedItem1 = null;
    private bool _loading = true;

    private async Task ObtenerData()
    {
        var result = await _pisoServicio.Lista();

        if (result.status)
        {
            listaModelos = (List<PisoDTO>)result.value!;
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await ObtenerData();
        _loading = false;
    }

    private bool FilterFunc1(PisoDTO element) => FilterFunc(element, searchString1);

    private bool FilterFunc(PisoDTO element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (element.Descripcion.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task AbrirNuevoModelo()
    {
        var dialogo = _dialogServicio.Show<MdPiso>("Nuevo Piso");
        var resultado = await dialogo.Result;

        if (!resultado.Canceled)
        {
            await ObtenerData();
        }
    }

    private async Task AbrirEditarModelo(PisoDTO modelo)
    {
        var parametros = new DialogParameters { ["_piso"] = modelo };

        var dialogo = _dialogServicio.Show<MdPiso>("Editar Piso", parametros);
        var resultado = await dialogo.Result;
        if (!resultado.Canceled)
        {
            await ObtenerData();
        }
    }

    private async Task EliminarModelo(PisoDTO modelo)
    {
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Esta seguro?",
                Text = $"Eliminar piso: {modelo.Descripcion}",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Si, eliminar",
                CancelButtonText = "No, volver"
            });

        if (result.IsConfirmed)
        {
            var resultado = await _pisoServicio.Eliminar(modelo.IdPiso);

            if (resultado)
            {
                _snackBar.Add("El piso fue eliminado", Severity.Success, a => a.VisibleStateDuration = 1000);
                await ObtenerData();
            }
            else
                _snackBar.Add("No se pudo eliminar", Severity.Error, a => a.VisibleStateDuration = 1000);
        }
    }





}
